import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.bind.JAXBContext;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import org.xml.sax.SAXException;

import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;

public class readXML {
	
   public static void main(String[] args) {
	   
	   /*
	    * TODO:
	    * Functions using the object methods and displaying
	    * information
	    * 
	    * Semantic analyzer
	    * 
	    * Going over previous code and figuring out where to
	    * implement new code.
	    * 
	    * Test basic functionality
	    * 
	    * Test new functionality
	    * 
	    * Displaying Errors
	    * 
	    * Debugging
	    */
	   
	   
	   //Read an XML file and serialized it into objects
	   
	   try{
		   File file = new File("file.xml");
	   JAXBContext jaxbContext = JAXBContext.newInstance(Table.class);
	   
		Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
		
		Table outputTable = (Table) jaxbUnmarshaller.unmarshal(file);
		
		System.out.println(outputTable);
		System.out.println(count(outputTable, "A"));
		System.out.println(min(outputTable, "A"));
		System.out.println(max(outputTable, "A"));
	   }
	   catch(JAXBException e){
		   e.printStackTrace();
	   }
	   
	   //Use objects to create xml file
	  /* List<Record> recordStorage = new ArrayList<>();
	   List<Cell> cellStorage = new ArrayList<>();
	   ArrayList<String> additionalValue = new ArrayList<>();
	   
	   Table table = new Table();
	   table.setName("Test Table");
	   Record record = new Record();
	   Cell cell = new Cell();
	   
	   additionalValue.add("Extra value");
	   
	   additionalValue.add("Second extra value");
	   
	   
	   cell.setColName("A");
	   cell.setOrigValue("Hello");
	   cell.setAdditionalValue(additionalValue);
	   cell.setType("VARCHAR");
	   
	   recordStorage.add(record);
	   cellStorage.add(cell);
	   
	   record.setCellStorage(cellStorage);
	   table.setRecordStorage(recordStorage);
	   
	   try{
		 File file = new File("file.xml");
		 
		 JAXBContext jaxbContext = JAXBContext.newInstance(Table.class);
		 Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
				 
		jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
		
		jaxbMarshaller.marshal(table, file);
		 
	   }
	   
	   	catch(JAXBException e){
		   e.printStackTrace();
	   }
	   
	*/
   }
   static int count(Table t, String str){
	   int counter = 0;
	   List<Record> RecordStorage = t.getRecordStorage();
	   
	   if(str.equals("*")){
		   return t.getRecordStorage().size();
	   }
	   else{
		   for(int i = 0; i < RecordStorage.size(); i++){
			  for(int y = 0; y < RecordStorage.get(i).getCellStorage().size(); y++){
				  List<Cell> cellStorage = RecordStorage.get(i).getCellStorage();
				  if(cellStorage.get(y).getColName().equals(str)){
					  counter++;
				  }
			  }
		   }
	   }
	   return counter;
   }
   
   static String min(Table t, String str){
	   String min= "";
	
	   List<Record> RecordStorage = t.getRecordStorage();
	   
	   for(int i = 0; i < RecordStorage.size(); i++){
			  for(int y = 0; y < RecordStorage.get(i).getCellStorage().size(); y++){
				  List<Cell> cellStorage = RecordStorage.get(i).getCellStorage();
				  if(cellStorage.get(y).getColName().equals(str)){					  
					  min = cellStorage.get(y).getOrigValue();
					  break;
				  }
			  }
		   }
	   
	   for(int i = 0; i < RecordStorage.size(); i++){
			  for(int y = 0; y < RecordStorage.get(i).getCellStorage().size(); y++){
				  List<Cell> cellStorage = RecordStorage.get(i).getCellStorage();
				  if(cellStorage.get(y).getColName().equals(str)){					  
					  if(cellStorage.get(y).getOrigValue().compareTo(min) < 0){
						  min = cellStorage.get(y).getOrigValue();
					  }
				  }
			  }
		   }
	   
	   return min;
   }
   static String max(Table t, String str){
	   String max = "";
	   List<Record> RecordStorage = t.getRecordStorage();
	   
	   for(int i = 0; i < RecordStorage.size(); i++){
			  for(int y = 0; y < RecordStorage.get(i).getCellStorage().size(); y++){
				  List<Cell> cellStorage = RecordStorage.get(i).getCellStorage();
				  if(cellStorage.get(y).getColName().equals(str)){
					 max = cellStorage.get(y).getOrigValue();
					 break;
				  }
			  }
		   }
	   
	   for(int i = 0; i < RecordStorage.size(); i++){
			  for(int y = 0; y < RecordStorage.get(i).getCellStorage().size(); y++){
				  List<Cell> cellStorage = RecordStorage.get(i).getCellStorage();
				  if(cellStorage.get(y).getColName().equals(str)){					  
					  if(cellStorage.get(y).getOrigValue().compareTo(max) > 0){
						  max = cellStorage.get(y).getOrigValue();
					  }
				  }
			  }
		   }
	   
	   return max;
   }
}
